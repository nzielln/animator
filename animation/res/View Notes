More Methods to Implement in Model
    - getInitialState
    - getEndState
    - getAtTime

Text View
    - Pretty much like our output from the model, shoudln't take too much work

Visual Animation
    - Draw and play animation inside a window
    - Recreating animations using examples from last assignment
    - Each thing changing one at a time
    - Each animation is specified by how the shape is BEFORE is starts and AFTER is ends
        - Will need to implement getShapeAtStart and getShapeAtEnd
    - Smooth animation == need to calculate intermediate step at any time
        - Linear Interpolation:
        - A state (Position, Color or Size) as time ta and B state at time tb, value at anytime t
        between ta and tb is:
            f(t) = (A(tb-t)/(tb-ta)) + (B(t-ta)/(tb-ta))
            - Constraints: t must be between ta and tb
    How to implement?
        - Java Swing (Module 10 to get started)
        - Will need to cast Graphics objects to Graphic2D objects (whatever this means ðŸ˜­)
        - Panels and Frames
            - Customize size of panels and frames: getMinimumSize, getMaximumSize, getPreferredSize
        - Need a mechanism to tell the window when to refresh itself automatically (Hmm? resize?)

        Behavior
            - Animation should start as view is loaded with no additional inputs from user
            - May need to use scroll bars (JScrollPane)
            - If objects overlap, draw in the order they were created in

SVG Animation
    - Create a textual description of the animation that is compliant with SVG file format
        - SVG: XML based format that can be used to describe images and animations; stores shapes
               and manipulations to be done to shape (instead of pixel values)
    -
How to run code?
    - Read animation specifications from files
    - Switch among views

Reading From Files
    - AnimationReader - reads animation files
        - Implement AnimationBuilder<T>
        - Implement a factory of views
            - Static method that takes in the name for a view ("text", "svg" or "visual")
            and constructs an instance of the view

Main Method
    - Enter point
    - Takes input as CLI arguments (args)
        - Form: -in "name-of-animation-file" -view "type-of-view" -out "where-output-show-go"
        -speed "integer-ticks-per-second"

    - Valid Inputs:
        - Argument pairs may appears in any order but the pair must be ordered
        - -in and -view are mandatory, defult speed 1 tick/s
        - Need to create an Application run configuration that chooses this class as the main class
            - Can also specify CLI arguments
        - Error message if CLI inputs are invalid (JOptionPane)

toh_3.txt

(String name, int initialStartTime, int initialPointX, int initialPointY, int initialWidth,
int initialHeight, int red, int green, int blue,
int endStartTime, int endPointX, int endPointY, int endWidth,
int endHeight, int red, int green, int blue)

- Read each line -> make the initial shape -> add this + a list to the animation
- for each change -> create a trandformation -> add this to the list
    - we need to store the intial and end state and switch when we start a new transformation


- Reader reads the file and then adds it to the builder -> create a new shape and new transformations
- readShape -> declare shape (need to change model to declare shape and type with defaults)
- readMotion -> complete the shape and create store information for initial shape
             -> add shape to animation
             -> create a new transformation
             -> add transformation to animation

View Interface??
    - readInputs() - filename, type of view, and speed
            - parse speed to integer
        - callReader()
        - callBuilder() - model
        - animate()
        - resize()