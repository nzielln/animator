ShapeNode
    - Fields: id, ShapeI, appears, disappears
    Method
        - setAppear
        - setDisappear
        - getAppear
        - getDisappear
        - toString
            "Name: " + id + "\n"
            + shape.toString + "\n"
            + "Appear: " + getAppear + "\n"
            + "Disappear: " + getDisappear

Shape Interface
    - initial.Oval
        - Fields: centerX, centerY, radiusX, radiusY, color
    - initial.Rectangle
        - Fields: height, width, color, cornerX, cornerY

    Methods
        - getColor
        - getPosition
        - getHeight or getWidth (getRadiusX or getRadiusY)
        - getID
        - String:
            "Type: initial.Rectangle " + "\n"
            Min: Height: Width: Color:

             "Type: initial.Oval " + "\n"
              Center: X: Y: Color:

Transformation
    - ShapeNode
    - Fields: startTime, endTime, toX, toY, toColor, toHeight, toWidth, transformation

    Methods
        - getMovement
            - if transformation == "position"
            - if transformation == "color"
            - if transformation == "height"; if shape is oval  == "yRadius"
            - if transformation == "width"; if shape is oval  == "xRadius"
            - if transformation == "color"
            - if transformation == "height"
        - changePosition
        - changeColor
        - changeHeight
        - changeWidth
        - changeXRadius
        - changeYRadius
        - getAppears
        - getDiasappears
        - getPosition
        - getEndColor
        - getHeight
        - getWidth
        -
        - addMovement
            - this.shape.movement = this
        - toString:
            - Structure: Shape name transformation from <start> to <end> from <tstart> to <tend>
            - Position:
            - Color:
            - Height/Width
            - Radius

MovementNode
    - Shape
    - Transformation
    Methods
        - getShape
        - getMovement

AnimationI
AnimationImpl // should we use a Hashmap or a LinkedHashMap?
    - Field: List<Shapes>
    - Constructor()
        - new HashMap<Integer, ArrayList<MovementNodes>>
    - ArrayList<ShapeNode> addToHashMap
    - getMovement


HashMap<Integer, ArrayList<ShapeNode>>
{time: List<Shapes>}






Steps:
1. User puts in information for a shape
    - Create a new list of ShapeNode (Animation Impl)
    - Make Shape object and a ShapeNode with id and shape (other fields will be added as information is recieved)
    - When they enter information for appear and disappear, set these in the ShapeNode object
    - When they enter a transformation -> create a new Transformation object -> add this object to the List<Transformation>
      in the ShapeNode class
    - Add the ShapeNode to the list















